// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: cache.proto

package cachegrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CacheServerClient is the client API for CacheServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CacheServerClient interface {
	GetClientID(ctx context.Context, in *AssignClientID, opts ...grpc.CallOption) (*AssignedClientID, error)
}

type cacheServerClient struct {
	cc grpc.ClientConnInterface
}

func NewCacheServerClient(cc grpc.ClientConnInterface) CacheServerClient {
	return &cacheServerClient{cc}
}

func (c *cacheServerClient) GetClientID(ctx context.Context, in *AssignClientID, opts ...grpc.CallOption) (*AssignedClientID, error) {
	out := new(AssignedClientID)
	err := c.cc.Invoke(ctx, "/cachegrpc.CacheServer/GetClientID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CacheServerServer is the server API for CacheServer service.
// All implementations must embed UnimplementedCacheServerServer
// for forward compatibility
type CacheServerServer interface {
	GetClientID(context.Context, *AssignClientID) (*AssignedClientID, error)
	mustEmbedUnimplementedCacheServerServer()
}

// UnimplementedCacheServerServer must be embedded to have forward compatible implementations.
type UnimplementedCacheServerServer struct {
}

func (UnimplementedCacheServerServer) GetClientID(context.Context, *AssignClientID) (*AssignedClientID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientID not implemented")
}
func (UnimplementedCacheServerServer) mustEmbedUnimplementedCacheServerServer() {}

// UnsafeCacheServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CacheServerServer will
// result in compilation errors.
type UnsafeCacheServerServer interface {
	mustEmbedUnimplementedCacheServerServer()
}

func RegisterCacheServerServer(s grpc.ServiceRegistrar, srv CacheServerServer) {
	s.RegisterService(&CacheServer_ServiceDesc, srv)
}

func _CacheServer_GetClientID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignClientID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServerServer).GetClientID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cachegrpc.CacheServer/GetClientID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServerServer).GetClientID(ctx, req.(*AssignClientID))
	}
	return interceptor(ctx, in, info, handler)
}

// CacheServer_ServiceDesc is the grpc.ServiceDesc for CacheServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CacheServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cachegrpc.CacheServer",
	HandlerType: (*CacheServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClientID",
			Handler:    _CacheServer_GetClientID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cache.proto",
}
